syntax = "proto3";

option csharp_namespace = "EncryptedChat.Common";

import "google/protobuf/timestamp.proto";

service Chat {
  rpc SendMessage(ChatMessageRequest) returns (ChatMessageResponse);
  
  rpc EditMessage(EditChatMessageRequest) returns (EditChatMessageResponse);

  rpc DeleteMessage(DeleteChatMessageRequest) returns (DeleteChatMessageResponse);

  rpc GetMessages(ChatRequest) returns (ChatResponse);

  rpc GetChatOverview(ChatOverviewRequest) returns (ChatOverviewResponse);

  rpc ReceiveMessages(ChatReceiveRequest) returns (stream ChatNotification);

  rpc GetCryptographicKeys(CryptographicKeysRequest) returns (CryptographicKeysReponse);

  rpc UpdateCryptographicKeys(CryptographicKeysUpdateRequest) returns (CryptographicKeysUpdateResponse);
}

message ChatMessageRequest {
  string target_id = 1;
  bytes encrypted_content_type = 2;
  bytes encrypted_message = 3;
  uint32 key_version = 4;
}

message ChatMessageResponse {
  bool success = 1;
}

message EditChatMessageRequest {
  string target_id = 1;
  uint32 message_id = 2;
  bytes encrypted_message = 3;
  uint32 key_version = 4;
}

message EditChatMessageResponse {
  bool success = 1;
}

message DeleteChatMessageRequest {
  string target_id = 1;
  uint32 message_id = 2;
}

message DeleteChatMessageResponse {
  bool success = 1;
}

message ChatRequest {
  string target_id = 1;
  optional uint32 minimum_message_id = 2;
  optional uint32 maximum_message_id = 3;
}

message ChatResponse {
  repeated ChatNotification messages = 1;
}

message ChatOverviewRequest {}

message ChatOverviewResponse {
  repeated ChatNotification messages = 1;
}

message ChatReceiveRequest {}

message ChatNotification {
  string sender_id = 1;
  string receiver_id = 2;
  uint32 message_id = 3;
  bytes encrypted_content_type = 4;
  bytes encrypted_message = 5;
  google.protobuf.Timestamp created = 6;
  optional google.protobuf.Timestamp edited = 7;
  uint32 key_version = 8;
  bool deleted = 9;
}

message CryptographicKeysRequest {
  string target_id = 1;
  optional uint32 minimum_version = 2;
  optional uint32 maximum_version = 3;
}

message CryptographicKeysReponse {
  repeated CryptographicKey keys = 1;

  message CryptographicKey {
    bytes key = 1;
    uint32 version = 2;
    uint32 public_key_version = 3;
  }
}

message CryptographicKeysUpdateRequest {
  string target_id = 1;
  bytes own_encrypted_key = 2;
  uint32 own_public_key_version = 3;
  bytes target_encrypted_key = 4;
  uint32 target_public_key_version = 5;
}

message CryptographicKeysUpdateResponse {
  bool success = 1;
  uint32 version = 2;
}
